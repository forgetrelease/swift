// RUN: %target-sil-opt -emit-sorted-sil -verify-continue-on-failure -o /dev/null %s 2>&1 | %FileCheck %s

// REQUIRES: asserts

sil_stage canonical

import Builtin

class C {}

// CHECK-LABEL: Begin Error in function end_borrow_1_addr_alloc_stack
// CHECK:       SIL verification failed: end_borrow of an address not produced by store_borrow
// CHECK-LABEL: End Error in function end_borrow_1_addr_alloc_stack
sil [ossa] @end_borrow_1_addr_alloc_stack : $@convention(thin) () -> () {
  %addr = alloc_stack $C
  end_borrow %addr : $*C
  dealloc_stack %addr : $*C
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: Begin Error in function destroy_value_dead_end
// CHECK:       SIL verification failed: a dead_end destroy_value must be in a dead-end block
// CHECK:       Verifying instruction:
// CHECK:            [[ARGUMENT:%[^,]+]] = argument
// CHECK:       ->   destroy_value [dead_end] [[ARGUMENT]]
// CHECK-LABEL: End Error in function destroy_value_dead_end
sil [ossa] @destroy_value_dead_end : $@convention(thin) (@owned C) -> () {
entry(%c : @owned $C):
  destroy_value [dead_end] %c : $C
  %retval = tuple()
  return %retval : $()
}

// CHECK-LABEL: Begin Error in function dealloc_box_dead_end
// CHECK:       SIL verification failed: a dead_end dealloc_box must be in a dead-end block
// CHECK:       Verifying instruction:
// CHECK:            [[BOX:%[^,]+]] = alloc_box
// CHECK:       ->   dealloc_box [dead_end] [[BOX]]
// CHECK-LABEL: End Error in function dealloc_box_dead_end
sil [ossa] @dealloc_box_dead_end : $@convention(thin) () -> () {
  %b = alloc_box ${ var C }
  dealloc_box [dead_end] %b : ${ var C }
  %retval = tuple()
  return %retval : $()
}

sil @c : $@yield_once @convention(thin) () -> @yields @inout ()

// CHECK:       Recent begin_apply: (%3, **%4**) = begin_apply %0()
// CHECK:       Matching begin_apply: (%1, **%2**) = begin_apply %0()
// CHECK-LABEL: Begin Error in function unnested_coroutines
// CHECK:       SIL verification failed: end_apply does not match most recent begin_apply
// CHECK-LABEL: End Error in function unnested_coroutines
// CHECK:       Recent begin_apply: (%1, **%2**) = begin_apply %0()
// CHECK:       Matching begin_apply: (%3, **%4**) = begin_apply %0()
// CHECK-LABEL: Begin Error in function unnested_coroutines
// CHECK:       SIL verification failed: end_apply does not match most recent begin_apply
// CHECK-LABEL: End Error in function unnested_coroutines
sil [ossa] @unnested_coroutines : $@convention(thin) () -> () {
  %coro = function_ref @c : $@yield_once @convention(thin) () -> @yields @inout ()
  (%t1, %r1) = begin_apply %coro() : $@yield_once @convention(thin) () -> @yields @inout ()
  (%t2, %r2) = begin_apply %coro() : $@yield_once @convention(thin) () -> @yields @inout ()
  end_apply %r1
  end_apply %r2
  %retval = tuple ()
  return %retval : $()
}
